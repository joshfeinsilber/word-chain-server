"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ioredis_1 = __importDefault(require("ioredis"));
const msgpack_lite_1 = __importDefault(require("msgpack-lite"));
const nanoid_1 = __importDefault(require("nanoid"));
const PubSub_1 = __importDefault(require("./PubSub"));
const RedisPubsub = (options) => {
    const redis = new ioredis_1.default(options);
    const pub = new ioredis_1.default(options);
    const listeners = new Map();
    redis.on('messageBuffer', (k, d) => {
        const key = k.toString('utf8');
        const data = msgpack_lite_1.default.decode(d).data;
        const callbacks = listeners.get(key);
        if (callbacks && callbacks.length) {
            callbacks.forEach(callback => {
                callback.callback(data);
            });
        }
    });
    const on = (key, callback) => {
        const alreadyListeningForKey = listeners.has(key);
        const id = nanoid_1.default();
        if (!alreadyListeningForKey) {
            listeners.set(key, [{ id, callback }]);
            redis
                .subscribe(key)
                .then()
                .catch();
        }
        else {
            const currentListeners = listeners.get(key);
            // @ts-ignore
            const newListeners = currentListeners.push({ id, callback });
            listeners.set(key, newListeners);
        }
        return { unsubscribe: () => unsubscribe(key, id) };
    };
    const publish = (key, data) => {
        pub
            // @ts-ignore
            .publish(key, msgpack_lite_1.default.encode({ data }))
            .then()
            .catch();
        return;
    };
    const unsubscribe = (key, id) => {
        const listenersForKey = listeners.get(key);
        if (!listenersForKey || !listenersForKey.length) {
            return;
        }
        if (listenersForKey.length === 1) {
            redis
                .unsubscribe(key)
                .then()
                .catch();
            listeners.delete(key);
        }
        else {
            const newListeners = listenersForKey.filter(l => l.id !== id);
            listeners.set(key, newListeners);
        }
    };
    return new PubSub_1.default(on, publish);
};
exports.default = RedisPubsub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3B1YnN1Yi9SZWRpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE2QztBQUM3QyxnRUFBa0M7QUFDbEMsb0RBQTJCO0FBQzNCLHNEQUE2QjtBQU83QixNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQXFCLEVBQUUsRUFBRTtJQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLGlCQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRTlCLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFBO0lBRS9DLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ2pELE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDOUIsTUFBTSxJQUFJLEdBQUcsc0JBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1FBQ25DLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDcEMsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUMzQixRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3pCLENBQUMsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQStCLEVBQUUsRUFBRTtRQUMxRCxNQUFNLHNCQUFzQixHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakQsTUFBTSxFQUFFLEdBQUcsZ0JBQU0sRUFBRSxDQUFBO1FBQ25CLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMzQixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUN0QyxLQUFLO2lCQUNGLFNBQVMsQ0FBQyxHQUFHLENBQUM7aUJBQ2QsSUFBSSxFQUFFO2lCQUNOLEtBQUssRUFBRSxDQUFBO1NBQ1g7YUFBTTtZQUNMLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMzQyxhQUFhO1lBQ2IsTUFBTSxZQUFZLEdBQWUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7WUFDeEUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUE7U0FDakM7UUFDRCxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQTtJQUNwRCxDQUFDLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsRUFBRTtRQUN6QyxHQUFHO1lBQ0QsYUFBYTthQUNaLE9BQU8sQ0FBQyxHQUFHLEVBQUUsc0JBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ3RDLElBQUksRUFBRTthQUNOLEtBQUssRUFBRSxDQUFBO1FBQ1YsT0FBTTtJQUNSLENBQUMsQ0FBQTtJQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQVUsRUFBRSxFQUFFO1FBQzlDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDL0MsT0FBTTtTQUNQO1FBQ0QsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNoQyxLQUFLO2lCQUNGLFdBQVcsQ0FBQyxHQUFHLENBQUM7aUJBQ2hCLElBQUksRUFBRTtpQkFDTixLQUFLLEVBQUUsQ0FBQTtZQUNWLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDdEI7YUFBTTtZQUNMLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQzdELFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFBO1NBQ2pDO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTyxJQUFJLGdCQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ2hDLENBQUMsQ0FBQTtBQUVELGtCQUFlLFdBQVcsQ0FBQSJ9