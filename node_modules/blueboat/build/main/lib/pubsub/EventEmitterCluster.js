"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cluster_1 = __importDefault(require("cluster"));
const nanoid_1 = __importDefault(require("nanoid"));
// @ts-ignore
// tslint:disable-next-line
const ClusterMaster = require('socket.io-adapter-cluster/master');
// @ts-ignore
// tslint:disable-next-line
exports.ClusterAdapter = require('socket.io-adapter-cluster');
const PubSub_1 = __importDefault(require("./PubSub"));
exports.ProcessStarter = (startFunction, numberOfWorkers, options) => {
    if (cluster_1.default.isWorker) {
        const processOptions = JSON.parse(process.env.blueboatGameValues || "{}");
        startFunction(processOptions);
    }
    if (cluster_1.default.isMaster) {
        const workers = [];
        const envVariables = {
            blueboatGameValues: options ? JSON.stringify(options) : "{}"
        };
        for (let i = 0; i < numberOfWorkers; i++) {
            const worker = cluster_1.default.fork(envVariables);
            workers.push(worker);
            worker.on('message', message => {
                if (message.key) {
                    workers.forEach(w => {
                        if (w.isConnected) {
                            w.send(message);
                        }
                    });
                }
            });
        }
        ClusterMaster();
    }
};
exports.PubSub = () => {
    const listeners = new Map();
    process.on('message', (data) => {
        const callbacks = listeners.get(data.key);
        if (callbacks && callbacks.length) {
            callbacks.forEach(callback => {
                callback.callback(data.data);
            });
        }
    });
    const on = (key, callback) => {
        const alreadyListeningForKey = listeners.has(key);
        const id = nanoid_1.default();
        if (!alreadyListeningForKey) {
            listeners.set(key, [{ id, callback }]);
        }
        else {
            const currentListeners = listeners.get(key);
            // @ts-ignore
            const newListeners = currentListeners.push({ id, callback });
            listeners.set(key, newListeners);
        }
        return { unsubscribe: () => unsubscribe(key, id) };
    };
    const publish = (key, data) => {
        process.send({ key, data });
        return;
    };
    const unsubscribe = (key, id) => {
        const listenersForKey = listeners.get(key);
        if (!listenersForKey || !listenersForKey.length) {
            return;
        }
        if (listenersForKey.length === 1) {
            listeners.delete(key);
        }
        else {
            const newListeners = listenersForKey.filter(l => l.id !== id);
            listeners.set(key, newListeners);
        }
    };
    return new PubSub_1.default(on, publish);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyQ2x1c3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcHVic3ViL0V2ZW50RW1pdHRlckNsdXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBNkI7QUFDN0Isb0RBQTJCO0FBRTNCLGFBQWE7QUFDYiwyQkFBMkI7QUFDM0IsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUE7QUFFakUsYUFBYTtBQUNiLDJCQUEyQjtBQUNkLFFBQUEsY0FBYyxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBMkIsQ0FBQTtBQUU1RixzREFBb0M7QUFPdkIsUUFBQSxjQUFjLEdBQUcsQ0FDNUIsYUFBa0IsRUFDbEIsZUFBdUIsRUFDdkIsT0FBYSxFQUNiLEVBQUU7SUFDRixJQUFJLGlCQUFPLENBQUMsUUFBUSxFQUFFO1FBQ3BCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsQ0FBQTtRQUN6RSxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUE7S0FDOUI7SUFDRCxJQUFJLGlCQUFPLENBQUMsUUFBUSxFQUFFO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLEVBQXNCLENBQUE7UUFDdEMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQzdELENBQUE7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFD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