"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const nanoid_1 = __importDefault(require("nanoid"));
const PubSub_1 = __importDefault(require("./PubSub"));
const EventEmitter = () => {
    const emitter = new events_1.default.EventEmitter();
    const listeners = new Map();
    emitter.setMaxListeners(10000);
    const on = (key, callback) => {
        const alreadyListeningForKey = listeners.has(key);
        const id = nanoid_1.default();
        if (!alreadyListeningForKey) {
            emitter.addListener(key, callback);
            listeners.set(key, [{ id, callback }]);
        }
        else {
            const currentListeners = listeners.get(key);
            if (currentListeners && currentListeners.push) {
                // @ts-ignore
                const newListeners = currentListeners.push({ id, callback });
                listeners.set(key, newListeners);
            }
        }
        return { unsubscribe: () => unsubscribe(key, id) };
    };
    const publish = (key, data) => {
        emitter.emit(key, data);
    };
    const unsubscribe = (key, id) => {
        const listenersForKey = listeners.get(key);
        if (!listenersForKey || !listenersForKey.length) {
            return;
        }
        if (listenersForKey.length === 1) {
            emitter.removeListener(key, listenersForKey[0].callback);
            listeners.delete(key);
        }
        else {
            const newListeners = listenersForKey.filter(l => l.id !== id);
            listeners.set(key, newListeners);
        }
    };
    return new PubSub_1.default(on, publish);
};
exports.default = EventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9wdWJzdWIvRXZlbnRFbWl0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTJCO0FBQzNCLG9EQUEyQjtBQUMzQixzREFBNkI7QUFPN0IsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksZ0JBQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQTtJQUMvQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRTlCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQStCLEVBQUUsRUFBRTtRQUMxRCxNQUFNLHNCQUFzQixHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakQsTUFBTSxFQUFFLEdBQUcsZ0JBQU0sRUFBRSxDQUFBO1FBQ25CLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMzQixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUNsQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUN2QzthQUFNO1lBQ0wsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNDLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFO2dCQUM3QyxhQUFhO2dCQUNiLE1BQU0sWUFBWSxHQUFlLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO2dCQUN4RSxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQTthQUNqQztTQUNGO1FBQ0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDcEQsQ0FBQyxDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEVBQUU7UUFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDekIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBVSxFQUFFLEVBQUU7UUFDOUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUMvQyxPQUFNO1NBQ1A7UUFDRCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUN4RCxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3RCO2FBQU07WUFDTCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtZQUM3RCxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQTtTQUNqQztJQUNILENBQUMsQ0FBQTtJQUVELE9BQU8sSUFBSSxnQkFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUNoQyxDQUFDLENBQUE7QUFFRCxrQkFBZSxZQUFZLENBQUEifQ==