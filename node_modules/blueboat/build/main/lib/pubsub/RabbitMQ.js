"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const amqplib_1 = __importDefault(require("amqplib"));
const msgpack_lite_1 = __importDefault(require("msgpack-lite"));
// @ts-ignore
const nanoid = require("nanoid");
const __1 = require("../..");
const RabbitMQ = (connectString) => {
    const listeners = new Map();
    let rabbitPublish = null;
    let rabbitListen = null;
    let rabbitUnsubscribe = null;
    const on = (key, callback) => {
        const id = nanoid();
        rabbitListen(key);
        const alreadyListening = listeners.has(key);
        if (alreadyListening) {
            const currentListeners = listeners.get(key);
            const newListeners = currentListeners.push({ id, callback });
            // @ts-ignore
            listeners.set(key, newListeners);
        }
        else {
            listeners.set(key, [{ id, callback }]);
        }
        return { unsubscribe: () => unsubscribe(key, id) };
    };
    const publish = (key, data) => {
        rabbitPublish(key, data);
    };
    const unsubscribe = (key, id) => {
        const listenersForKey = listeners.get(key);
        if (!listeners || !listenersForKey.length) {
            return;
        }
        if (listenersForKey.length === 1) {
            rabbitUnsubscribe(key);
            listeners.delete(key);
        }
        else {
            const newListeners = listenersForKey.filter(l => l.id !== id);
            listeners.set(key, newListeners);
        }
    };
    return new Promise((resolve, reject) => {
        amqplib_1.default
            .connect(connectString)
            .then(connection => {
            connection.createChannel().then(channel => {
                rabbitPublish = (key, message) => {
                    channel.assertQueue(key);
                    channel.sendToQueue(key, msgpack_lite_1.default.encode({ data: message }));
                };
                rabbitListen = (key) => {
                    const alreadyListening = listeners.has(key);
                    if (alreadyListening) {
                        return;
                    }
                    channel.assertQueue(key);
                    channel.consume(key, d => {
                        const data = msgpack_lite_1.default.decode(d.content).data;
                        const listenersToCall = listeners.get(key);
                        if (listenersToCall && listenersToCall.length) {
                            listenersToCall.forEach(listener => listener.callback(data));
                        }
                    });
                };
                rabbitUnsubscribe = (key) => {
                    channel.cancel(key);
                };
                resolve(new __1.PubSub(on, publish));
            });
        })
            .catch(e => {
            reject(e);
        });
    });
};
exports.default = RabbitMQ;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFiYml0TVEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3B1YnN1Yi9SYWJiaXRNUS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUEwQjtBQUMxQixnRUFBa0M7QUFDbEMsYUFBYTtBQUNiLGlDQUFpQztBQUNqQyw2QkFBOEI7QUFPOUIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxhQUFxQixFQUFFLEVBQUU7SUFDekMsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUE7SUFFL0MsSUFBSSxhQUFhLEdBQVEsSUFBSSxDQUFBO0lBQzdCLElBQUksWUFBWSxHQUFRLElBQUksQ0FBQTtJQUM1QixJQUFJLGlCQUFpQixHQUFRLElBQUksQ0FBQTtJQUVqQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQVcsRUFBRSxRQUFhLEVBQUUsRUFBRTtRQUN4QyxNQUFNLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQTtRQUNuQixZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakIsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzNDLElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNDLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1lBQzVELGFBQWE7WUFDYixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQTtTQUNqQzthQUFNO1lBQ0wsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDdkM7UUFDRCxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxD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