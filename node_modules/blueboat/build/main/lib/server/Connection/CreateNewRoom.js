"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nanoid_1 = __importDefault(require("nanoid"));
const CreateNewRoom = (client, io, roomFetcher, gameValues, pubsub, storage, availableRooms, onRoomDisposed, roomName, existingRoomIds, creatorOptions, customRoomIdGenerator) => {
    return new Promise(async (resolve, reject) => {
        try {
            const roomToCreate = availableRooms.filter(r => r.name === roomName)[0];
            if (!roomToCreate) {
                throw new Error(`${roomName} does not have a room handler`);
            }
            let roomId;
            for (let i = 0; i < 3; i++) {
                if (roomId) {
                    break;
                }
                const possibleRoomId = customRoomIdGenerator
                    ? customRoomIdGenerator(roomToCreate.name, roomToCreate.options, creatorOptions)
                    : nanoid_1.default();
                if (!existingRoomIds.includes(possibleRoomId)) {
                    roomId = possibleRoomId;
                }
            }
            if (!roomId) {
                throw new Error('Failed to create room with unique ID');
            }
            const initialGameValues = await gameValues.getGameValues();
            const room = new roomToCreate.handler({
                io,
                pubsub,
                owner: client,
                roomId,
                storage,
                creatorOptions,
                options: roomToCreate.options,
                roomFetcher,
                gameValues,
                initialGameValues,
                onRoomDisposed,
                roomType: roomToCreate.name,
                onRoomCreated: (error) => {
                    if (!error) {
                        const snapshot = {
                            id: roomId,
                            type: roomName,
                            owner: client,
                            metadata: {},
                            createdAt: Date.now()
                        };
                        roomFetcher
                            .addRoom(snapshot)
                            .then(() => resolve(room))
                            .catch(e => reject(e));
                    }
                    else {
                        reject(error);
                    }
                }
            });
        }
        catch (e) {
            reject(e);
        }
    });
};
exports.default = CreateNewRoom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlTmV3Um9vbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmVyL0Nvbm5lY3Rpb24vQ3JlYXRlTmV3Um9vbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9EQUEyQjtBQVczQixNQUFNLGFBQWEsR0FBRyxDQUNwQixNQUFvQixFQUNwQixFQUFVLEVBQ1YsV0FBd0IsRUFDeEIsVUFBNEIsRUFDNUIsTUFBYyxFQUNkLE9BQWdCLEVBQ2hCLGNBQWtDLEVBQ2xDLGNBQXdDLEVBQ3hDLFFBQWdCLEVBQ2hCLGVBQXlCLEVBQ3pCLGNBQW1CLEVBQ25CLHFCQUlXLEVBQ0ksRUFBRTtJQUNqQixPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDM0MsSUFBSTtZQUNGLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3ZFLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxRQUFRLCtCQUErQixDQUFDLENBQUE7YUFDNUQ7WUFDRCxJQUFJLE1BQWMsQ0FBQTtZQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLE1BQU0sRUFBRTtvQkFDVixNQUFLO2lCQUNOO2dCQUNELE1BQU0sY0FBYyxHQUFHLHFCQUFxQjtvQkFDMUMsQ0FBQyxDQUFDLHFCQUFxQixDQUNuQixZQUFZLENBQUMsSUFBSSxFQUNqQixZQUFZLENBQUMsT0FBTyxFQUNwQixjQUFjLENBQ2Y7b0JBQ0gsQ0FBQyxDQUFDLGdCQUFNLEVBQUUsQ0FBQTtnQkFDWixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtvQkFDN0MsTUFBTSxHQUFHLGNBQWMsQ0FBQTtpQkFDeEI7YUFDRjtZQUNELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO2FBQ3hEO1lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtZQUMxRCxNQUFNLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLEVBQUU7Z0JBQ0YsTUFBTTtnQkFDTixLQUFLLEVBQUUsTUFBTTtnQkFDYixNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsY0FBYztnQkFDZCxPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87Z0JBQzdCLFdBQVc7Z0JBQ1gsVUFBVTtnQkFDVixpQkFBaUI7Z0JBQ2pCLGNBQWM7Z0JBQ2QsUUFBUSxFQUFFLFlBQVksQ0FBQyxJQUFJO2dCQUMzQixhQUFhLEVBQUUsQ0FBQyxLQUFXLEVBQUUsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLEtBQUssRUFBRTt3QkFDVixNQUFNLFFBQVEsR0FBaUI7NEJBQzdCLEVBQUUsRUFBRSxNQUFNOzRCQUNWLElBQUksRUFBRSxRQUFROzRCQUNkLEtBQUssRUFBRSxNQUFNOzRCQUNiLFFBQVEsRUFBRSxFQUFFOzRCQUNaLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO3lCQUN0QixDQUFBO3dCQUNELFdBQVc7NkJBQ1IsT0FBTyxDQUFDLFFBQVEsQ0FBQzs2QkFDakIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFZLENBQUMsQ0FBQzs2QkFDakMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7cUJBQ3pCO3lCQUFNO3dCQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtxQkFDZDtnQkFDSCxDQUFDO2FBQ0YsQ0FBQyxDQUFBO1NBQ0g7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNWO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxrQkFBZSxhQUFhLENBQUEifQ==