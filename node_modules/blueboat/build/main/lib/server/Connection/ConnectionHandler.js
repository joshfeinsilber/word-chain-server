"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const nanoid_1 = __importDefault(require("nanoid"));
const serialize_error_1 = __importDefault(require("serialize-error"));
const ClientActions_1 = __importDefault(require("../../constants/ClientActions"));
const PubSubListeners_1 = require("../../constants/PubSubListeners");
const ServerActions_1 = __importDefault(require("../../constants/ServerActions"));
const Logger_1 = __importStar(require("../../utils/Logger"));
const CreateNewRoom_1 = __importDefault(require("./CreateNewRoom"));
const JoinRoom_1 = __importDefault(require("./JoinRoom"));
const ConnectionHandler = (options) => {
    const { io, socket, storage, pubsub, availableRoomTypes, roomFetcher, gameValues, onRoomMade, onRoomDisposed, customRoomIdGenerator } = options;
    const userId = socket.handshake.query.id || nanoid_1.default();
    const client = {
        id: userId,
        sessionId: socket.id,
        origin: socket &&
            socket.request &&
            socket.request.headers &&
            socket.request.headers.origin
            ? socket.request.headers.origin
            : '',
        ip: socket && socket.handshake && socket.handshake.address
            ? socket.handshake.address
            : ''
    };
    socket.emit(ServerActions_1.default.clientIdSet, userId);
    socket.on(ClientActions_1.default.createNewRoom, async (request) => {
        try {
            if (!request || !request.type || !request.uniqueRequestId) {
                throw new Error('Room type needed');
            }
            Logger_1.default(`${socket.id} trying to create a new ${request.type} room`, Logger_1.LoggerTypes.io);
            const room = await CreateNewRoom_1.default(client, io, roomFetcher, gameValues, pubsub, storage, availableRoomTypes, onRoomDisposed, request.type, await roomFetcher.getListOfRooms(), request.options, customRoomIdGenerator);
            Logger_1.default(`${room.roomId} made`, Logger_1.LoggerTypes.room);
            onRoomMade(room);
            socket.emit(`${request.uniqueRequestId}-create`, room.roomId);
        }
        catch (e) {
            const error = serialize_error_1.default(e);
            Logger_1.default(`${socket.id} error creating room - ${JSON.stringify(error)}`, Logger_1.LoggerTypes.room);
            socket.emit(`${request.uniqueRequestId}-error`, error);
        }
    });
    socket.on(ClientActions_1.default.joinRoom, async (payload) => {
        try {
            const { roomId } = payload;
            if (!roomId) {
                throw new Error('Room ID not provided');
            }
            Logger_1.default(`${socket.id} trying to join ${roomId} room`, Logger_1.LoggerTypes.io);
            await JoinRoom_1.default(roomId, client, roomFetcher, pubsub, payload.options);
            Logger_1.default(`${socket.id} joined ${roomId} room`, Logger_1.LoggerTypes.io);
        }
        catch (e) {
            if (payload && payload.roomId) {
                const error = serialize_error_1.default(e);
                Logger_1.default(`${socket.id} error joining room ${payload.roomId} - ${JSON.stringify(error)}`, Logger_1.LoggerTypes.room);
                socket.emit(`${payload.roomId}-error`, error);
            }
        }
    });
    socket.on(ClientActions_1.default.sendMessage, (message) => {
        if (message.key === undefined || !message.room) {
            return;
        }
        Logger_1.default(`${socket.id} - message - ${JSON.stringify(message)}`, Logger_1.LoggerTypes.io);
        pubsub.publish(message.room, {
            client,
            action: ClientActions_1.default.sendMessage,
            data: { key: message.key, data: message.data }
        });
    });
    socket.on('disconnect', () => {
        Logger_1.default(`${socket.id} - disconnected`, Logger_1.LoggerTypes.io);
        pubsub.publish(PubSubListeners_1.PLAYER_LEFT, socket.id);
    });
};
exports.default = ConnectionHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29ubmVjdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZlci9Db25uZWN0aW9uL0Nvbm5lY3Rpb25IYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG9EQUEyQjtBQUMzQixzRUFBNEM7QUFJNUMsa0ZBQXlEO0FBQ3pELHFFQUE2RDtBQUM3RCxrRkFBeUQ7QUFJekQsNkRBQXdEO0FBR3hELG9FQUEyQztBQUMzQywwREFBaUM7QUFtQmpDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFpQyxFQUFFLEVBQUU7SUFDOUQsTUFBTSxFQUNKLEVBQUUsRUFDRixNQUFNLEVBQ04sT0FBTyxFQUNQLE1BQU0sRUFDTixrQkFBa0IsRUFDbEIsV0FBVyxFQUNYLFVBQVUsRUFDVixVQUFVLEVBQ1YsY0FBYyxFQUNkLHFCQUFxQixFQUN0QixHQUFHLE9BQU8sQ0FBQTtJQUVYLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxnQkFBTSxFQUFFLENBQUE7SUFDcEQsTUFBTSxNQUFNLEdBQWlCO1FBQzNCLEVBQUUsRUFBRSxNQUFNO1FBQ1YsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ3BCLE1BQU0sRUFDSixNQUFNO1lBQ04sTUFBTSxDQUFDLE9BQU87WUFDZCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU87WUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUMzQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUMvQixDQUFDLENBQUMsRUFBRTtRQUNSLEVBQUUsRUFDQSxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU87WUFDcEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTztZ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