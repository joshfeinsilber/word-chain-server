"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const body_parser_1 = __importDefault(require("body-parser"));
const express_1 = __importDefault(require("express"));
const express_basic_auth_1 = __importDefault(require("express-basic-auth"));
const http_1 = require("http");
const socket = __importStar(require("socket.io"));
const socket_io_msgpack_parser_1 = __importDefault(require("socket.io-msgpack-parser"));
const __1 = require("../..");
const GetGameValues_1 = __importDefault(require("../api/GetGameValues"));
const GetRoom_1 = __importDefault(require("../api/GetRoom"));
const GetRooms_1 = __importDefault(require("../api/GetRooms"));
const SetGameValues_1 = __importDefault(require("../api/SetGameValues"));
const PubSubListeners_1 = require("../constants/PubSubListeners");
const bundle_1 = __importDefault(require("../panel/bundle"));
const Logger_1 = __importStar(require("../utils/Logger"));
const ConnectionHandler_1 = __importDefault(require("./Connection/ConnectionHandler"));
const CustomGameValues_1 = __importDefault(require("./CustomGameValues"));
const Emitter_1 = __importDefault(require("./Emitter"));
const RoomFetcher_1 = __importDefault(require("./RoomFetcher"));
const PANEL_PREFIX = '/blueboat-panel';
const PANEL_HTML = `
<html>
<head>
<title>Blueboat Panel</title>
</head>
<div id='root'></div>
<script>
${bundle_1.default.js}
</script>
</html>
`;
const signals = ['SIGINT', 'SIGTERM', 'SIGUSR2', 'uncaughtException'];
class Server {
    constructor(options) {
        this.server = null;
        this.storage = null;
        this.state = {
            availableRoomTypes: [],
            managingRooms: new Map()
        };
        this.listen = null;
        this.initialOptions = null;
        this.app = null;
        this.io = null;
        this.roomFetcher = null;
        this.customRoomIdGenerator = null;
        this.onError = null;
        this.registerRoom = (roomName, handler, options) => {
            const { availableRoomTypes } = this.state;
            if (availableRoomTypes.map(room => room.name).includes(roomName)) {
                // Can't have two handlers for the same room
                return;
            }
            this.state.availableRoomTypes.push({ name: roomName, handler, options });
            return;
        };
        this.getRoomCount = async () => {
            try {
                const rooms = await this.roomFetcher.getListOfRooms();
                return rooms.length;
            }
            catch (e) {
                throw e;
            }
        };
        this.getRooms = async () => {
            try {
                const rooms = await this.roomFetcher.getListOfRoomsWithData();
                return rooms;
            }
            catch (e) {
                throw e;
            }
        };
        this.getNumberOfConnectedClients = () => {
            return new Promise(resolve => {
                this.io.of('/').clients((error, clients) => {
                    if (!error) {
                        resolve(clients.length);
                    }
                    else {
                        resolve(0);
                    }
                });
            });
        };
        this.gracefullyShutdown = () => this.shutdown()
            .then()
            .catch();
        this.onRoomMade = (room) => {
            this.state.managingRooms.set(room.roomId, room);
        };
        this.onRoomDisposed = (roomId) => {
            Logger_1.default(`${roomId} disposed`, Logger_1.LoggerTypes.room);
            this.state.managingRooms.delete(roomId);
        };
        this.spawnServer = (options) => {
            Logger_1.default('Spawning server...', Logger_1.LoggerTypes.server);
            this.server = new http_1.Server(this.app);
            this.makeRoutes(options.admins);
            this.listen = (port, callback) => {
                this.server.listen(port, callback);
                Logger_1.default('Server listening on port ' + port, Logger_1.LoggerTypes.server);
            };
            const socketOptions = {
                // @ts-ignore
                parser: socket_io_msgpack_parser_1.default,
                path: '/blueboat',
                transports: ['websocket'],
                pingTimeout: options.pingTimeout || 5000,
                pingInterval: options.pingInterval || 25000
            };
            this.io = socket.default(socketOptions);
            if (options.adapters && options.adapters.length) {
                options.adapters.forEach(adapter => this.io.adapter(adapter));
            }
            this.io.attach(this.server, socketOptions);
            this.io.on('connection', s => {
                Logger_1.default(s.id + ' connected', Logger_1.LoggerTypes.io);
                ConnectionHandler_1.default({
                    availableRoomTypes: this.state.availableRoomTypes,
                    io: this.io,
                    pubsub: this.pubsub,
                    storage: this.storage,
                    roomFetcher: this.roomFetcher,
                    gameValues: this.gameValues,
                    socket: s,
                    onRoomMade: this.onRoomMade,
                    onRoomDisposed: this.onRoomDisposed,
                    customRoomIdGenerator: this.customRoomIdGenerator
                });
            });
            this.spawnPubSub();
            signals.forEach(signal => process.once(signal, (reason) => this.shutdown(signal, reason)));
        };
        this.spawnPubSub = () => {
            this.pubsub.on(PubSubListeners_1.PLAYER_LEFT, (playerId) => {
                Emitter_1.default.emit(PubSubListeners_1.PLAYER_LEFT, playerId);
            });
        };
        this.makeRoutes = (adminUsers) => {
            const router = express_1.default.Router();
            router.use(body_parser_1.default.json());
            // @ts-ignore
            router.use((req, res, next) => {
                // @ts-ignore
                req.gameServer = this;
                next();
            });
            router.use(express_basic_auth_1.default({ users: adminUsers, challenge: true }));
            // @ts-ignore
            router.get('/', (req, res) => {
                res.send(PANEL_HTML);
            });
            router.get('/rooms', GetRooms_1.default);
            router.get('/rooms/:room', GetRoom_1.default);
            router.get('/gameValues', GetGameValues_1.default);
            router.post('/gameValues', SetGameValues_1.default);
            this.app.use(PANEL_PREFIX, router);
        };
        this.shutdown = async (signal, reason) => {
            if (this.onError) {
                this.onError(signal, reason);
            }
            if (signal === 'uncaughtException' && reason) {
                console.log(reason);
            }
            try {
                if (this.state.managingRooms.size) {
                    await Promise.all(Array.from(this.state.managingRooms.values()).map(room => room
                        .dispose()
                        .then()
                        .catch()));
                }
                if (this.initialOptions && this.initialOptions.onDispose) {
                    await this.initialOptions.onDispose();
                }
                Logger_1.default('Server closing...', Logger_1.LoggerTypes.server);
                this.io.close();
                this.server.close();
            }
            catch (e) {
                Logger_1.default('Server closing...', Logger_1.LoggerTypes.server);
                this.io.close();
                this.server.close();
                return;
            }
        };
        this.initialOptions = options;
        this.app = options.app;
        this.storage = options.storage;
        // @ts-ignore
        this.pubsub = options.pubsub;
        this.roomFetcher = new RoomFetcher_1.default({ storage: this.storage });
        this.gameValues = new CustomGameValues_1.default({
            storage: __1.RedisStorage({ clientOptions: options.redis })
        });
        this.customRoomIdGenerator = options.customRoomIdGenerator;
        if (options.onError) {
            this.onError = options.onError;
        }
        this.spawnServer(options);
    }
}
exports.default = Server;
//# sourceMappingURL=data:application/json;base64,