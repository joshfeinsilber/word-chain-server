"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RedisKeys_1 = require("../constants/RedisKeys");
/**
 * Can help find a list of currently available Rooms and their snapshots
 */
class RoomFetcher {
    constructor(options) {
        this.storage = null;
        this.getListOfRooms = async () => {
            try {
                const rooms = await this.storage.fetchKeys(RedisKeys_1.ROOM_PREFIX);
                return rooms;
            }
            catch (e) {
                throw e;
            }
        };
        this.getListOfRoomsWithData = async () => {
            try {
                const roomList = await this.getListOfRooms();
                const rooms = await Promise.all(roomList.map(async (r) => {
                    try {
                        const room = await this.storage.get(RedisKeys_1.ROOM_PREFIX + r, true);
                        if (room) {
                            return JSON.parse(room);
                        }
                        return null;
                    }
                    catch (e) {
                        throw e;
                    }
                }));
                return rooms.filter(room => room !== null);
            }
            catch (e) {
                throw e;
            }
        };
        this.findRoomById = async (roomId) => {
            try {
                const room = await this.storage.get(RedisKeys_1.ROOM_PREFIX + roomId);
                return JSON.parse(room);
            }
            catch (e) {
                throw e;
            }
        };
        this.setRoomMetadata = async (roomId, newMetadata) => {
            try {
                const room = await this.findRoomById(roomId);
                await this.storage.set(RedisKeys_1.ROOM_PREFIX + room.id, JSON.stringify(Object.assign({}, room, { metadata: newMetadata })));
            }
            catch (e) {
                return e;
            }
        };
        this.addRoom = async (room) => {
            try {
                await this.storage.set(RedisKeys_1.ROOM_PREFIX + room.id, JSON.stringify(room));
            }
            catch (e) {
                throw e;
            }
        };
        this.removeRoom = async (roomId) => {
            try {
                await this.storage.remove(RedisKeys_1.ROOM_PREFIX + roomId);
            }
            catch (e) {
                throw e;
            }
        };
        this.storage = options.storage;
    }
}
exports.default = RoomFetcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9vbUZldGNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZlci9Sb29tRmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHNEQUFvRDtBQU9wRDs7R0FFRztBQUNILE1BQU0sV0FBVztJQUdmLFlBQVksT0FBMkI7UUFGaEMsWUFBTyxHQUFZLElBQUksQ0FBQTtRQU12QixtQkFBYyxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ2pDLElBQUk7Z0JBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyx1QkFBVyxDQUFDLENBQUE7Z0JBQ3ZELE9BQU8sS0FBSyxDQUFBO2FBQ2I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixNQUFNLENBQUMsQ0FBQTthQUNSO1FBQ0gsQ0FBQyxDQUFBO1FBRU0sMkJBQXNCLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDekMsSUFBSTtnQkFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtnQkFDNUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUM3QixRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtvQkFDckIsSUFBSTt3QkFDRixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFXLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO3dCQUMxRCxJQUFJLElBQUksRUFBRTs0QkFDUixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFpQixDQUFBO3lCQUN4Qzt3QkFDRCxPQUFPLElBQUksQ0FBQTtxQkFDWjtvQkFBQyxPQUFPLENBQUMsRUFBRTt3QkFDVixNQUFNLENBQUMsQ0FBQTtxQkFDUjtnQkFDSCxDQUFDLENBQUMsQ0FDSCxDQUFBO2dCQUNELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQTthQUMzQztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxDQUFBO2FBQ1I7UUFDSCxDQUFDLENBQUE7UUFFTSxpQkFBWSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsRUFBRTtZQUM3QyxJQUFJO2dCQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQTtnQkFDekQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3hCO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLENBQUE7YUFDUjtRQUNILENBQUMsQ0FBQTtRQUVNLG9CQUFlLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxXQUFnQixFQUFFLEVBQUU7WUFDbEUsSUFBSTtnQkFDRixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7Z0JBQzVDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ3BCLHVCQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFDckIsSUFBSSxDQUFDLFNBQVMsbUJBQU0sSUFBSSxJQUFFLFFBQVEsRUFBRSxXQUFXLElBQUcsQ0FDbkQsQ0FBQTthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLENBQUE7YUFDVDtRQUNILENBQUMsQ0FBQTtRQUVNLFlBQU8sR0FBRyxLQUFLLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQzVDLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBVyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2FBQ3BFO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLENBQUE7YUFDUjtRQUNILENBQUMsQ0FBQTtRQUVNLGVBQVUsR0FBRyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7WUFDM0MsSUFBSTtnQkFDRixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHVCQUFXLEdBQUcsTUFBTSxDQUFDLENBQUE7YUFDaEQ7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixNQUFNLENBQUMsQ0FBQTthQUNSO1FBQ0gsQ0FBQyxDQUFBO1FBckVDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQTtJQUNoQyxDQUFDO0NBcUVGO0FBRUQsa0JBQWUsV0FBVyxDQUFBIn0=