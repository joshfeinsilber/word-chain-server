/// <reference types="node" />
import Express from 'express';
import { Server as HTTPServer } from 'http';
import { RedisOptions } from 'ioredis';
import AvaiableRoomType from '../../types/AvailableRoomType';
import PubSub from '../pubsub/PubSub';
import Room from '../room/Room';
import Storage from '../storage/Storage';
import CustomGameValues from './CustomGameValues';
interface ServerArguments {
    app: Express.Application;
    storage: Storage;
    pubsub: PubSub;
    redis: RedisOptions;
    admins: any;
    adapters?: SocketIO.Adapter[];
    customRoomIdGenerator?: (roomName: string, roomOptions?: any, creatorOptions?: any) => string;
    onDispose?: () => Promise<any>;
    onError?: (code: string, reason?: any) => void;
    pingTimeout?: number;
    pingInterval?: number;
}
interface ServerState {
    availableRoomTypes: AvaiableRoomType[];
    managingRooms: Map<string, Room>;
}
declare class Server {
    server: HTTPServer;
    storage: Storage;
    gameValues: CustomGameValues;
    state: ServerState;
    listen: (port: number, callback?: () => void) => void;
    private initialOptions;
    private app;
    private io;
    private pubsub;
    private roomFetcher;
    private customRoomIdGenerator;
    private onError;
    constructor(options: ServerArguments);
    registerRoom: (roomName: string, handler: any, options?: any) => void;
    getRoomCount: () => Promise<number>;
    getRooms: () => Promise<import("../../types/RoomSnapshot").RoomSnapshot[]>;
    getNumberOfConnectedClients: () => Promise<number>;
    gracefullyShutdown: () => Promise<void>;
    private onRoomMade;
    private onRoomDisposed;
    private spawnServer;
    private spawnPubSub;
    private makeRoutes;
    private shutdown;
}
export default Server;
