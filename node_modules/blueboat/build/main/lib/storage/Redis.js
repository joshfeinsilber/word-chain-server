"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ioredis_1 = __importDefault(require("ioredis"));
const Storage_1 = __importDefault(require("./Storage"));
const threeHours = 60 * 60 * 3;
const RedisStorage = (options) => {
    const client = new ioredis_1.default(options.clientOptions);
    const basePrefix = options.customPrefix || 'blueboat:';
    client.on('error', (e) => {
        throw new Error(e);
    });
    const getKey = (key) => basePrefix + key;
    const fetchKeys = async (prefix) => {
        try {
            const fullPrefix = getKey(prefix);
            const keys = await client.keys(getKey(prefix + '*'));
            return keys.map(key => key.replace(fullPrefix, ''));
        }
        catch (e) {
            throw e;
        }
    };
    const set = async (key, value, setOptions) => {
        try {
            const noExpiration = setOptions && setOptions.noExpiration;
            if (noExpiration) {
                await client.set(getKey(key), value);
            }
            else {
                await client.set(getKey(key), value, 'EX', threeHours);
            }
        }
        catch (e) {
            throw new Error(getKey(key) + ' - failed to set value - ' + e && e.message
                ? e.message
                : 'No error message');
        }
    };
    const get = async (key, resolveIfNoData) => {
        try {
            const value = await client.get(getKey(key));
            if (!value) {
                if (resolveIfNoData) {
                    return null;
                }
                else {
                    throw new Error(getKey(key) + ' - No data received');
                }
            }
            return value;
        }
        catch (e) {
            throw e;
        }
    };
    const remove = async (key) => {
        try {
            await client.del(getKey(key));
        }
        catch (e) {
            throw e;
        }
    };
    return new Storage_1.default(get, set, remove, fetchKeys);
};
exports.default = RedisStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3N0b3JhZ2UvUmVkaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBMkI7QUFDM0Isd0RBQStCO0FBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBTzlCLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBMkIsRUFBRSxFQUFFO0lBQ25ELE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDL0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksSUFBSSxXQUFXLENBQUE7SUFDdEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtRQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BCLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUE7SUFFaEQsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ3pDLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUNwRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3BEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLENBQUMsQ0FBQTtTQUNSO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsTUFBTSxHQUFHLEdBQUcsS0FBSyxFQUNmLEdBQVcsRUFDWCxLQUFhLEVBQ2IsVUFBc0MsRUFDdEMsRUFBRTtRQUNGLElBQUk7WUFDRixNQUFNLFlBQVksR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQTtZQUMxRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTthQUNyQztpQkFBTTtnQkFDTCxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7YUFDdkQ7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsMkJBQTJCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPO2dCQUN4RCxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87Z0JBQ1gsQ0FBQyxDQUFDLGtCQUFrQixDQUN2QixDQUFBO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxNQUFNLEdBQUcsR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFFLGVBQXlCLEVBQUUsRUFBRTtRQUMzRCxJQUFJO1lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzNDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsSUFBSSxlQUFlLEVBQUU7b0JBQ25CLE9BQU8sSUFBSSxDQUFBO2lCQUNaO3FCQUFNO29CQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLHFCQUFxQixDQUFDLENBQUE7aUJBQ3JEO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLENBQUMsQ0FBQTtTQUNSO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ25DLElBQUk7WUFDRixNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDOUI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sQ0FBQyxDQUFBO1NBQ1I7SUFDSCxDQUFDLENBQUE7SUFFRCxPQUFPLElBQUksaUJBQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUNqRCxDQUFDLENBQUE7QUFFRCxrQkFBZSxZQUFZLENBQUEifQ==