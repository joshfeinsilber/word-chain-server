"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_cache_1 = __importDefault(require("node-cache"));
const EventEmitterCluster = __importStar(require("../pubsub/EventEmitterCluster"));
const Storage_1 = __importDefault(require("./Storage"));
const threeHours = 60 * 60 * 3;
const MEMORY_COMMAND = 'INTERNAL_MEMORY_CLUSTER';
const SET = 'SET';
const REMOVE = 'REMOVE';
const Memory = () => {
    const cache = new node_cache_1.default();
    const pubsub = EventEmitterCluster.PubSub();
    pubsub.on(MEMORY_COMMAND, (data) => {
        if (data && data.type) {
            if (data.type === SET) {
                set(data.data.key, data.data.value, data.data.setOptions).catch();
            }
            if (data.type === REMOVE) {
                remove(data.data.key).catch();
            }
        }
    });
    const fetchKeys = (prefix) => {
        return new Promise((resolve, reject) => {
            cache.keys((err, keys) => {
                if (err) {
                    return reject(err);
                }
                return resolve(keys
                    .filter(key => key.startsWith(prefix))
                    .map(key => key.replace(prefix, '')));
            });
        });
    };
    const set = (key, value, setOptions) => {
        return new Promise((resolve, reject) => {
            if (setOptions && setOptions.noExpiration) {
                cache.set(key, value, err => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
            else {
                cache.set(key, value, threeHours, err => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
        });
    };
    const get = (key, resolveIfNoData) => {
        return new Promise((resolve, reject) => {
            cache.get(key, (err, data) => {
                if (err) {
                    reject(err);
                }
                else {
                    if (!data && !resolveIfNoData) {
                        reject(`No data found for ${key}`);
                    }
                    else {
                        // @ts-ignore
                        resolve(data);
                    }
                }
            });
        });
    };
    const remove = (key) => {
        return new Promise((resolve, reject) => {
            cache.del(key, err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    };
    const setContainer = async (key, value, setOptions) => {
        pubsub.publish(MEMORY_COMMAND, {
            type: SET,
            data: {
                key,
                value,
                setOptions
            }
        });
    };
    const removeContainer = async (key) => {
        pubsub.publish(MEMORY_COMMAND, {
            type: REMOVE,
            data: {
                key
            }
        });
    };
    return new Storage_1.default(get, setContainer, removeContainer, fetchKeys);
};
exports.default = Memory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2x1c3Rlck1lbW9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvc3RvcmFnZS9DbHVzdGVyTWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDREQUFrQztBQUNsQyxtRkFBb0U7QUFDcEUsd0RBQStCO0FBRS9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBRTlCLE1BQU0sY0FBYyxHQUFHLHlCQUF5QixDQUFBO0FBQ2hELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQTtBQUNqQixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUE7QUFFdkIsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksb0JBQVMsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFBO0lBRTNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBUyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFO2dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTthQUNsRTtZQUNELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7Z0JBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO2FBQzlCO1NBQ0Y7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBYyxFQUFxQixF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