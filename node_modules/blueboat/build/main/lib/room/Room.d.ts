import Clock from '@gamestdio/timer';
import { Server } from 'socket.io';
import SimpleClient from '../../types/SimpleClient';
import PubSub from '../pubsub/PubSub';
import CustomGameValues from '../server/CustomGameValues';
import RoomFetcher from '../server/RoomFetcher';
import Storage from '../storage/Storage';
import Callback from '../utils/Callback';
import Client from './Client';
interface RoomOptions {
    io: Server;
    roomId: string;
    storage: Storage;
    pubsub: PubSub;
    owner: SimpleClient;
    creatorOptions: any;
    options: {};
    onRoomDisposed: (roomId: string) => void;
    roomFetcher: RoomFetcher;
    gameValues: CustomGameValues;
    initialGameValues: any;
    roomType: string;
    onRoomCreated: (error?: any) => void;
}
declare class Room<State = any> {
    state: State;
    initialGameValues: any;
    roomId: string;
    clock: Clock;
    clients: Client[];
    options: any;
    creatorOptions: any;
    metadata: any;
    gameValues?: CustomGameValues;
    roomType: string;
    owner: SimpleClient;
    listeners: {
        onJoin: Callback;
        onLeave: Callback;
    };
    private io;
    private pubsub;
    private storage;
    private onRoomDisposed;
    private roomFetcher;
    private disposing;
    private _gameMessagePubsub;
    private _playerPubsub;
    private _lastState;
    constructor(options: RoomOptions);
    onCreate?(options?: any): Promise<void>;
    canClientJoin?(client: SimpleClient, options?: any): Promise<void>;
    onJoin?(client: Client, options?: any): void;
    onMessage?(client: Client, key: string, data?: any): void;
    onLeave?(client: Client, intentional: boolean): Promise<void>;
    beforePatch?(lastState: State): void;
    afterPatch?(lastState: State): void;
    beforeDispose?(): Promise<void>;
    onDispose?(): Promise<void>;
    setState: (newState: State) => void;
    broadcast: (key: string, data?: any) => void;
    setMetadata: (newMetadata: any) => void;
    dispose: () => Promise<void>;
    allowReconnection: (client: Client, seconds: number) => Promise<boolean>;
    private onRoomCreated;
    private findFullClientFromSimpleClient;
    private addClient;
    private clientHasJoined;
    private clientRequestsToJoin;
    private removeClient;
    private pubSubListener;
}
export default Room;
