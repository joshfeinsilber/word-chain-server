"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const timer_1 = __importDefault(require("@gamestdio/timer"));
const ClientActions_1 = __importDefault(require("../constants/ClientActions"));
const PubSubListeners_1 = require("../constants/PubSubListeners");
const ServerActions_1 = __importDefault(require("../constants/ServerActions"));
const Emitter_1 = __importDefault(require("../server/Emitter"));
const Callback_1 = __importDefault(require("../utils/Callback"));
const Client_1 = __importDefault(require("./Client"));
class Room {
    /* tslint:enable */
    constructor(options) {
        // Public values
        // @ts-ignore
        this.state = {};
        this.initialGameValues = {};
        this.clock = new timer_1.default(true);
        this.clients = [];
        this.options = {};
        this.creatorOptions = {};
        this.listeners = {
            onJoin: new Callback_1.default(),
            onLeave: new Callback_1.default()
        };
        this.disposing = false;
        // @ts-ignore
        this._lastState = {};
        this.setState = (newState) => {
            this.state = newState;
        };
        this.broadcast = (key, data) => {
            this.clients.forEach(client => client.send(key, data));
        };
        this.setMetadata = (newMetadata) => {
            this.roomFetcher
                .setRoomMetadata(this.roomId, newMetadata)
                .then(() => (this.metadata = newMetadata))
                .catch();
        };
        this.dispose = async () => {
            if (this.disposing) {
                return;
            }
            this.disposing = true;
            try {
                await Promise.all(this.clients.map(client => this.removeClient(client.sessionId, true)));
                if (this.beforeDispose) {
                    await this.beforeDispose();
                }
                this.clock.stop();
                await this.roomFetcher.removeRoom(this.roomId);
                if (this._gameMessagePubsub && this._gameMessagePubsub.unsubscribe) {
                    this._gameMessagePubsub.unsubscribe();
                }
                Emitter_1.default.removeListener(PubSubListeners_1.PLAYER_LEFT, this._playerPubsub);
                if (this.onDispose) {
                    await this.onDispose();
                }
                this.onRoomDisposed(this.roomId);
            }
            catch (e) {
                throw e;
            }
        };
        this.allowReconnection = (client, seconds) => {
            return new Promise(resolve => {
                if (this.disposing) {
                    resolve(false);
                    return;
                }
                const timeOut = this.clock.setTimeout(() => {
                    const reconnected = this.clients.filter(c => c.id === client.id).length
                        ? true
                        : false;
                    if (listener) {
                        listener.clear();
                    }
                    resolve(reconnected);
                }, seconds * 1000);
                const listener = this.listeners.onJoin.add((joinedClient) => {
                    const reconnected = this.clients.filter(c => c.id === joinedClient.id)
                        .length
                        ? true
                        : false;
                    if (reconnected) {
                        if (timeOut) {
                            timeOut.clear();
                        }
                        resolve(true);
                        listener.clear();
                    }
                });
            });
        };
        this.onRoomCreated = () => {
            //
        };
        this.findFullClientFromSimpleClient = (simpleClient) => {
            return this.clients.filter(client => client.sessionId === simpleClient.sessionId && client.id === client.id)[0];
        };
        this.addClient = (prejoinedClient, options) => {
            this.clients.push(new Client_1.default(this.roomId, prejoinedClient.id, prejoinedClient.sessionId, prejoinedClient.origin, prejoinedClient.ip, this.io, this.removeClient));
            this.clientHasJoined(this.findFullClientFromSimpleClient(prejoinedClient), options);
        };
        this.clientHasJoined = (client, options) => {
            if (this.owner && this.owner.id && client.id === this.owner.id) {
                this.owner.sessionId = client.sessionId;
            }
            client.send(ServerActions_1.default.joinedRoom);
            if (this.onJoin) {
                this.listeners.onJoin.call(client, options);
                this.onJoin(client, options);
            }
        };
        this.clientRequestsToJoin = async (client, options) => {
            try {
                // Two clients with the same ID are not allowed to join
                if (process.env.BLUEBOAT_NO_SAME_CLIENTS) {
                    if (this.clients.filter(c => c.id === client.id).length) {
                        // tslint:disable-next-line:no-string-throw
                        throw 'ALREADY_IN_ROOM';
                    }
                }
                if (this.canClientJoin) {
                    await this.canClientJoin(client, options);
                }
                return true;
            }
            catch (e) {
                throw e;
            }
        };
        this.removeClient = async (clientSessionId, intentional) => {
            const client = this.clients.filter(c => c.sessionId === clientSessionId)[0];
            if (!client) {
                return;
            }
            client.send(ServerActions_1.default.removedFromRoom);
            this.clients = this.clients.filter(c => c !== client);
            this.listeners.onLeave.call(client, intentional);
            if (this.onLeave) {
                await this.onLeave(client, intentional);
            }
            if (!this.clients || !this.clients.length) {
                this.dispose()
                    .then()
                    .catch();
            }
        };
        this.pubSubListener = () => {
            this._gameMessagePubsub = this.pubsub.on(this.roomId, (d) => {
                const payload = d;
                if (!payload || !payload.action) {
                    return;
                }
                if (payload.action === PubSubListeners_1.REQUEST_INFO) {
                    this.pubsub.publish(PubSubListeners_1.REQUEST_INFO, {
                        clients: this.clients,
                        state: this.state
                    });
                    return;
                }
                if (!payload.client) {
                    return;
                }
                const { action, data, client } = payload;
                if (action === ClientActions_1.default.joinRoom) {
                    this.clientRequestsToJoin(client, data.options)
                        .then(() => {
                        this.addClient(client, data.options);
                    })
                        .catch(e => this.io.to(client.sessionId).emit(`${this.roomId}-error`, e));
                }
                if (action === ClientActions_1.default.sendMessage) {
                    const roomClient = this.clients.filter(c => c.sessionId === payload.client.sessionId)[0];
                    if (!roomClient) {
                        return;
                    }
                    if (this.onMessage) {
                        this.onMessage(roomClient, payload.data.key, payload.data.data);
                    }
                }
            });
            this._playerPubsub = (playerSessionId) => {
                const client = this.clients.filter(c => c.sessionId === playerSessionId)[0];
                if (!client) {
                    return;
                }
                this.removeClient(client.sessionId, false)
                    .then()
                    .catch();
            };
            Emitter_1.default.addListener(PubSubListeners_1.PLAYER_LEFT, this._playerPubsub);
        };
        this.roomId = options.roomId;
        this.io = options.io;
        this.pubsub = options.pubsub;
        this.storage = options.storage;
        this.owner = options.owner;
        this.onRoomDisposed = options.onRoomDisposed;
        this.roomFetcher = options.roomFetcher;
        this.gameValues = options.gameValues;
        this.roomType = options.roomType;
        this.initialGameValues = options.initialGameValues;
        if (options.options) {
            this.options = options.options;
        }
        if (options.creatorOptions) {
            this.creatorOptions = options.creatorOptions;
        }
        const roomCreated = (error) => {
            options.onRoomCreated(error);
            this.onRoomCreated();
            if (error) {
                // @ts-ignore
                this.dispose().catch((e) => false);
            }
        };
        if (this.onCreate) {
            this.onCreate(options.options)
                .then(() => roomCreated())
                .catch(e => roomCreated(e));
        }
        else {
            roomCreated();
        }
        // Dispose room automatically in 2.5 hours
        this.clock.setTimeout(() => this.dispose()
            .then()
            .catch(), 1000 * 60 * 60 * 2.5);
        this.pubSubListener();
    }
}
exports.default = Room;
//# sourceMappingURL=data:application/json;base64,